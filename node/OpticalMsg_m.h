//
// Generated file, do not edit! Created by nedtool 5.6 from node/OpticalMsg.msg.
//

#ifndef __OPTICALMSG_M_H
#define __OPTICALMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class OpticalMsg;
class OpticalMsgPath;
/**
 * Class generated from <tt>node/OpticalMsg.msg:16</tt> by nedtool.
 * <pre>
 * packet OpticalMsg
 * {
 *     int srcAddr;
 *     int destAddr;
 *     int slotReq;
 *     int msgState;
 *     int red;
 *     int green;
 *     int blue;
 * }
 * </pre>
 */
class OpticalMsg : public ::omnetpp::cPacket
{
  protected:
    int srcAddr = 0;
    int destAddr = 0;
    int slotReq = 0;
    int msgState = 0;
    int red = 0;
    int green = 0;
    int blue = 0;

  private:
    void copy(const OpticalMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OpticalMsg&);

  public:
    OpticalMsg(const char *name=nullptr, short kind=0);
    OpticalMsg(const OpticalMsg& other);
    virtual ~OpticalMsg();
    OpticalMsg& operator=(const OpticalMsg& other);
    virtual OpticalMsg *dup() const override {return new OpticalMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual int getSlotReq() const;
    virtual void setSlotReq(int slotReq);
    virtual int getMsgState() const;
    virtual void setMsgState(int msgState);
    virtual int getRed() const;
    virtual void setRed(int red);
    virtual int getGreen() const;
    virtual void setGreen(int green);
    virtual int getBlue() const;
    virtual void setBlue(int blue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OpticalMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OpticalMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>node/OpticalMsg.msg:27</tt> by nedtool.
 * <pre>
 * packet OpticalMsgPath
 * {
 *     int srcAddr;
 *     int destAddr;
 *     int slotReq;
 *     int msgState;
 *     int opticalPath[];
 *     int red;
 *     int green;
 *     int blue;
 * }
 * </pre>
 */
class OpticalMsgPath : public ::omnetpp::cPacket
{
  protected:
    int srcAddr = 0;
    int destAddr = 0;
    int slotReq = 0;
    int msgState = 0;
    int *opticalPath = nullptr;
    size_t opticalPath_arraysize = 0;
    int red = 0;
    int green = 0;
    int blue = 0;

  private:
    void copy(const OpticalMsgPath& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const OpticalMsgPath&);

  public:
    OpticalMsgPath(const char *name=nullptr, short kind=0);
    OpticalMsgPath(const OpticalMsgPath& other);
    virtual ~OpticalMsgPath();
    OpticalMsgPath& operator=(const OpticalMsgPath& other);
    virtual OpticalMsgPath *dup() const override {return new OpticalMsgPath(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSrcAddr() const;
    virtual void setSrcAddr(int srcAddr);
    virtual int getDestAddr() const;
    virtual void setDestAddr(int destAddr);
    virtual int getSlotReq() const;
    virtual void setSlotReq(int slotReq);
    virtual int getMsgState() const;
    virtual void setMsgState(int msgState);
    virtual void setOpticalPathArraySize(size_t size);
    virtual size_t getOpticalPathArraySize() const;
    virtual int getOpticalPath(size_t k) const;
    virtual void setOpticalPath(size_t k, int opticalPath);
    virtual void insertOpticalPath(int opticalPath);
    virtual void insertOpticalPath(size_t k, int opticalPath);
    virtual void eraseOpticalPath(size_t k);
    virtual int getRed() const;
    virtual void setRed(int red);
    virtual int getGreen() const;
    virtual void setGreen(int green);
    virtual int getBlue() const;
    virtual void setBlue(int blue);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OpticalMsgPath& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OpticalMsgPath& obj) {obj.parsimUnpack(b);}

#endif // ifndef __OPTICALMSG_M_H

